* ST terminal
Treat st terminal as xterm (cf. https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal_002dSpecific.html)

#+BEGIN_SRC emacs-lisp
(add-to-list 'term-file-aliases (quote ("st" . "xterm")))
#+END_SRC
* Input map in terminal
This section fixes key bindings in Emacs running in a terminal.

** Overview
There are several problems in handling key events in the current terminals. For
example:
- it is not possible to use modifiers other than =C-= and =M-=,
- the =C-= modifier encodes lower or upper-case letters identically,
- special names for some ASCII characters collide with =C-= modified letters (e.g., a tab is =C-i=),
- there is no reliable way to use multiple modifier keys, other than, =M-S-=,
- some keys cannot be used with =C-= modifier, eg., =;=, =.=, =/=.

The reason for all of this is that there is no standard for these _corner_
cases. There has been a several proposals:
- [[http://www.leonerd.org.uk/hacks/fixterms/][Paul Evan's fixterms]]
- [[https://sw.kovidgoyal.net/kitty/protocol-extensions.html#extensions-to-the-xterm-protocol][Kitty extension to xterm protocol]]
- [[https://github.com/CyberShadow/term-keys][term-keys package]]
- XTerm's [[https://invisible-island.net/xterm/manpage/xterm.html#VT100-Widget-Resources:formatOtherKeys][formatOtherKeys]] and [[https://invisible-island.net/xterm/manpage/xterm.html#VT100-Widget-Resources:modifyOtherKeys][modifyOtherKeys]] classes

I decided to use Paul's fixterm proposition (which is compatible with XTerm's
solution given =formatOtherKeys= is set to 1). It works as follows: for each
key combination that is not expressible in the current schema it will use the
following escape sequence:

#+BEGIN_SRC text :tangle no
ESC[<key>;<mod>u
#+END_SRC

where
- =key= is the ASCII decimal value of the key
- =mod= is 1 + bitmask encoding of the modifiers
  - =S-= = 1
  - =M-= = 2
  - =C-= = 4

For example, =C-;= sends =\e[59;5u=.

Xterm can do that as well with =formatOtherKeys:1=, which can be verified using:

#+BEGIN_SRC sh :tangle no
xterm -xrm '*modifyOtherKeys:1' -xrm '*formatOtherKeys:1' -e cat -v
#+END_SRC

- With =modifyOtherKeys:2= it can do even =C-m=, =C-j= and =C-i=:
  - =C-m= -- =109;5u=
  - =C-S-m= -- =77;6u=
  - =C-i= -- =105;5u=
  - =C-S-i= -- =73;6u=
  - =C-j= -- =106;5u=
  - =C-S-j= -- =74;5u=
  - =C-`= -- =96;5u=
  - =C-\= -- =92;5u=

For this to work, two things need to be updated:
1. the terminal emulator (st in my case)
2. the emacs's =input-decode-map=

*** Terminal - st
In [[https://st.suckless.org/][st]] (my terminal of choice), one has to modify two places:
1. =mappedkeys= variable in =config.h= which contains a list of
   custom-mapped keys:

   #+BEGIN_SRC c :tangle no
   XK_semicolon
   #+END_SRC

2. =keys= variable in =config.h= containing the actual mapping:

   #+BEGIN_SRC c :tangle no
   {XK_semicolon, ControlMask, "\033[59;5u", 0, 0}
   #+END_SRC
*** Emacs
In emacs we only need to add the corresponding binding into the
=input-decode-map=:

#+BEGIN_SRC emacs-lisp :tangle no
(define-key input-decode-map "\e[59;5u" (kbd "C-;"))
#+END_SRC
*** Notes about upper/lower keys binding
From Emacs _Key Sequence Input_:

#+BEGIN_QUOTE
If an input character is upper-case (or has the shift modifier) and has no
key binding, but its lower-case equivalent has one, then read-key-sequence'
converts the character to lower case. Note that lookup-key' does not perform
case conversion in this way.
#+END_QUOTE
*** Notes about [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Sequences.html#Key-Sequences][Key Sequences]] in Emacs
- The Emacs Lisp representation for a key sequence is a string or vector.
- The =kbd= macro returns a representation of a key sequence using some sort of
  translation.
- It is also possible to bind keys using a vector like =[C-S-M]= which will
  create a =<C-M>= binding, a different from =C-S-M=.
** Variables
#+BEGIN_SRC emacs-lisp
(defvar my-keys nil
  "The list of keys to be mapped as pairs of keySym and ascii code")

(defvar my-keys-debug nil
  "Toggle my-keys debugging")

(defvar my-st-dir "~/Projects/st"
  "The location of st terminal sources")
#+END_SRC
** Configuration
*** Default keys
#+BEGIN_SRC emacs-lisp
(setq my-keys-debug nil
      my-keys '((?\; "XK_semicolon"    ("C" "C-M"))
                (?:  "XK_colon"        ("C-S" "C-M-S"))
                (?'  "XK_apostrophe"   ("C" "C-M"))
                (?\" "XK_quotedbl"     ("C-S" "C-M-S"))
                (?.  "XK_period"       ("C" "C-M"))
                (?,  "XK_comma"        ("C" "C-M"))
                (?=  "XK_equal"        ("C" "C-M"))
                (?<  "XK_less"         ("C-S" "C-M-S"))
                (?>  "XK_greater"      ("C-S" "C-M-S"))
                (??  "XK_question"     ("C-S" "C-M-S"))
                (?/  "XK_slash"        ("C" "C-M"))
                (?\\ "XK_backslash"    ("C" "C-M"))
                (?|  "XK_bar"          ("C-S" "C-M-S"))
                (?~  "XK_asciitilde"   ("C-S" "C-M-S"))
                (?`  "XK_grave"        ("C" "C-S"))
                (?{  "XK_braceleft"    ("C-S" "C-M-S"))
                (?}  "XK_braceright"   ("C-S" "C-M-S"))
                (?\] "XK_bracketright" ("C" "C-M"))
                (?\( "XK_parenleft"    ("C-S" "C-M-S"))
                (?\) "XK_parenright"   ("C-S" "C-M-S"))
                (?C  "XK_C"            ("C-S" "C-M-S"))
                (?X  "XK_X"            ("C-S" "C-M-S"))
                (?V  "XK_V"            ("C-S" "C-M-S"))
                (?I  "XK_I"            ("C-S" "C-M-S"))
                (?M  "XK_M"            ("C-S" "C-M-S"))
                (?J  "XK_J"            ("C-S" "C-M-S"))
                (?K  "XK_K"            ("C-S" "C-M-S"))
                (?m  "XK_m"            ("C" "C-M")               (([C-m]) ([C-M-m])))
                (?i  "XK_i"            ("C" "C-M")               (([C-i]) ([C-M-i])))
                (?O  "XK_O"            ("C-S" "C-M-S"))
                (? "XK_BackSpace"    ("C" "C-M" "M-S" "C-S" "C-M-S") (([C-]) ([C-M-]) ([M-S-]) ([C-S-]) ([C-M-S-])))
                (?+  "XK_plus"         ("C-S" "C-M-S"))
                (?-  "XK_minus"        ("C" "C-M"))
                ))
#+END_SRC

- The =C-m=, =C-M-m, =C-i= and =C-M-i= can be bind using symbol =[C-m]=, etc.
  They are not =C-m=, but =<C-m>= from Emacs perspective.
- It would be possible to map as well =C-j= but that is handy for inserting the
  new line literal (using =C-q=) for example for replace.
*** =C-<number>= and =C-M-<number>= keys
#+BEGIN_SRC emacs-lisp
(let ((nums '(1 2 3 4 5 6 7 8 9)))
  (mapc (lambda (x)
          ;; DEC 48 is '0' in ASCII table
          (let* ((code (+ 48 x))
                 (e (list code (format "XK_%d" x) (list "C" "C-M"))))
            (setq my-keys (append my-keys (list e)))))
        nums))
#+END_SRC
*** Auxiliary functions
#+BEGIN_SRC emacs-lisp
(defun flatten (list-of-lists)
  (apply #'append list-of-lists))

(defun join (sep lst)
   (mapconcat 'identity lst sep))

(defun zip (xs ys)
  (if (and (null xs) (null ys))
      ()
    (cons (cond
           ((null xs) (cons '(nil) (car ys)))
           ((null ys) (cons (car xs) '(nil)))
           (t (cons (car xs) (car ys))))
          (zip (cdr xs) (cdr ys)))))

(defun filter (condp lst)
  (delq nil
        (mapcar (lambda (x) (and (funcall condp x) x)) lst)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defconst my--my-keys-prefix "\033["
  "Escape code sequence prefix")

(defconst my--my-keys-suffix "u"
  "Escape code sequence suffix")

(defconst my--my-keys-modifiers
  '(("M"     . ("Mod1Mask"                           3))
    ("M-S"   . ("Mod1Mask | ShiftMask"               4))
    ("C"     . ("ControlMask"                        5))
    ("C-S"   . ("ControlMask | ShiftMask"            6))
    ("C-M"   . ("ControlMask | Mod1Mask"             7))
    ("C-M-S" . ("ControlMask | Mod1Mask | ShiftMask" 8)))
  "The key modifiers as triplets of st emacs name, st name and code")

(defun my--encode-key-mod (key-code mod-code)
  (format "%s%d;%d%s" my--my-keys-prefix key-code mod-code my--my-keys-suffix))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my--iterate-keys (fun)
  (mapcan
   (lambda (key)
     (let ((key-code (car key))
           (key-sym (cadr key))
           (mods (caddr key))
           (keys-emacs (cadddr key)))
       (mapcar
        (lambda (x)
          (let* ((mod (car x))
                 (key-emacs (cadr x))
                 (mod-info (cdr (assoc mod my--my-keys-modifiers))))
            (funcall fun key-code key-sym mod mod-info key-emacs)))
        (zip mods keys-emacs))))
   my-keys))
#+END_SRC
*** Enabling my-keys in st
#+BEGIN_SRC emacs-lisp
(defun my--escape-string (s)
  (mapconcat
   (lambda (x)
     (if (and (>= x 32) (<= x 255))
         (format "%c" x)
       (format "\\x%02X" x)))
   (append s nil)
   ""))

(defun my--st-encode-keys ()
  (delete-dups
   (my--iterate-keys
    (lambda (key-code key-sym mod mod-info key-emacs)
      (let ((mod-sym (car mod-info))
            (mod-code (cadr mod-info)))
        (format "{%s, %s, \"%s\", 0, 0}"
                key-sym
                mod-sym
                (my--escape-string (my--encode-key-mod key-code mod-code))))))))

(defun my--st-encode-mapped-keys ()
  (delete-dups
   (my--iterate-keys
    (lambda (key-code key-sym mod mod-info key-emacs)
      (format "%s" key-sym)))))

(defun my-st-sync-mapped-keys ()
  (interactive)
  (with-temp-buffer
    (insert (concat (join ",\n" (my--st-encode-keys)) ",\n"))
    (write-region (point-min) (point-max) (expand-file-name "my-keys.h" my-st-dir)))

  (with-temp-buffer
    (insert (concat (join ",\n" (my--st-encode-mapped-keys)) ",\n"))
    (write-region (point-min) (point-max) (expand-file-name "my-mapped-keys.h" my-st-dir))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(my-st-sync-mapped-keys)
#+END_SRC
*** Enabling my-keys in Emacs
Make Emacs aware of these new keys using the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Translation-Keymaps.html][input-decode-map]].

#+BEGIN_SRC emacs-lisp
(defun my-emacs-encode-keys ()
  (my--iterate-keys
   (lambda (key-code key-sym mod mod-info key-emacs)
     (let* ((mod-code (cadr mod-info))
            (input (my--encode-key-mod key-code mod-code))
            (key (if (null key-emacs)
                     (kbd (format "%s-%c" mod key-code))
                   key-emacs)))
       (when my-keys-debug
         (message "binding: %s to %s (%s-%c)" input key mod key-code))

       ;(define-key input-decode-map input key)
       (define-key xterm-function-map input key)))))

(when my-keys
  (message "Enabling my-keys")
  (eval-after-load "xterm" '(my-emacs-encode-keys)))
;;(unless (display-graphic-p)
;;  (my-emacs-encode-keys))
#+END_SRC
*** TODO should this go the the xterm-function-map instead?
- try it in GUI to see what works better
- try it in Xterm
- try term keys
* TODO cursor shape
* TODO cursor color
* TODO split copy & paste
- use the same trick as clipetty
- just for one command
  #+begin_src elisp :tangle no
  (if clipetty-mode
      (add-function :around (local 'interprogram-cut-function) #'clipetty-cut)
    (remove-function (local 'interprogram-cut-function) #'clipetty-cut)))
  #+end_src
  #+begin_src elisp :tangle no
  (defun clipetty-kill-ring-save ()
    "Enables Clipetty just for this save.
  It can be annoying to have Clipetty overwrite your system
  clipboard every time you kill something.  This function wraps
  Clipetty around the `kill-ring-save' function and can be invoked
  explicitly."
    (interactive)
    (when (use-region-p)
      (if clipetty-mode
          (kill-ring-save (region-beginning) (region-end))
        (clipetty-mode)
        (kill-ring-save (region-beginning) (region-end))
        (clipetty-mode 0))))
  #+end_src
* TMUX environment refresh
#+BEGIN_SRC emacs-lisp
(defun my-refresh-env ()
  (interactive)
  (letrec ((tmux-update-envir
            (split-string-and-unquote
             (shell-command-to-string "tmux show-options -gv update-environment") "[\n]"))
           (tmux-envir-string
            (split-string-and-unquote
             (shell-command-to-string "tmux show-environment") "[\n]"))
           (tmux-envir
            (mapcar (lambda (x) (split-string x "[=]")) tmux-envir-string))
           (update-vars
            (delq nil
                  (mapcar (lambda (x)
                            (when
                                (not (null (member (car x) tmux-update-envir))) x))
                          tmux-envir))))
    (mapc (lambda (x)
            (let ((name (car x))
                  (val (cadr x)))
              (message "Setting %s to '%s'" name val)
              (setenv name val)))
          update-vars)))

#+END_SRC
** TODO auto refresh when doing git push/fetch/pull
