#+BEGIN_SRC emacs-lisp
;; ;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* Resources
** TODO possible notmuch setup
https://github.com/ar1a/dotfiles/blob/master/emacs/.doom.d/%2Bmail.el
** TODO https://tecosaur.github.io/emacs-config/config.html
- [ ] emacs anywhere setup
* My functions
** Save buffer and switch to normal mode
#+BEGIN_SRC emacs-lisp
(defun my-save-buffer-and-switch-to-normal-mode ()
  (interactive)
  (save-buffer)
  (evil-force-normal-state))
#+END_SRC
** Switch to messages buffer

#+BEGIN_SRC emacs-lisp
(defun my-switch-to-messages-buffer (&optional arg)
    "Switch to the `*Messages*' buffer. If prefix argument ARG is
given, switch to it in an other, possibly new window."
    (interactive "P")
    (with-current-buffer (messages-buffer)
      (goto-char (point-max))
      (if arg
          (switch-to-buffer-other-window (current-buffer))
        (switch-to-buffer (current-buffer)))))
#+END_SRC
** Copy & paste
#+BEGIN_SRC emacs-lisp
(defun my-copy-to-xclipboard ()
  (interactive)
  (if (use-region-p)
      (if (not (display-graphic-p))
          (letrec ((s (buffer-substring-no-properties (region-beginning) (region-end)))
                   (s-length (+ (* (length s) 3) 2)))
            (if (<= s-length 16384) ; magic number set to the same as ESC_BUF_SIZ of suckless termial (st.c)
                (progn
                  (send-string-to-terminal
                   (concat "\e]52;c;"
                           (base64-encode-string (encode-coding-string s 'utf-8) t)
                           "\07"))
                  (deactivate-mark)
                  (message "Yanked region to terminal clipboard"))
              (message "Selection too long (%d) to send to terminal." s-length)))
        (if (= 0 (shell-command-on-region (region-beginning) (region-end) "xsel -i -b"))
            (progn
              (deactivate-mark)
              (message "Yanked region to X-clipboard"))
          (error "Is program `xsel' installed?")))
    (message "Nothing to yank to terminal clipboard")))

(defun my-cut-to-xclipboard ()
  (interactive)
  (my-copy-to-xclipboard)
  (kill-region (region-beginning) (region-end)))

(defun my-paste-from-xclipboard ()
  "Uses shell command `xsel -o' to paste from x-clipboard. With
one prefix arg, pastes from X-PRIMARY, and with two prefix args,
pastes from X-SECONDARY."
  (interactive)
  (if (display-graphic-p)
      (clipboard-yank)
    (letrec
        ((opt (prefix-numeric-value current-prefix-arg))
         (opt (cond
               ((=  1 opt) "b")
               ((=  4 opt) "p")
               ((= 16 opt) "s"))))
(insert (shell-command-to-string (concat "xsel -o -" opt))))))
#+END_SRC
* Basic config
#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

(setq auto-save-default t
      bookmark-save-flag 1
      display-line-numbers-type t
      doom-localleader-key ","
      doom-localleader-alt-key "C-M-,"
      doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 18)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 24)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 24)
      doom-theme 'doom-one
      evil-cross-lines t
      evil-want-fine-undo t
      kill-ring-max 1024
      ;; must be set before org is loaded
      org-directory (expand-file-name "~/Notes")
      save-interprogram-paste-before-kill t
      select-enable-clipboard nil
      ;; 100MB
      undo-limit (* 100 1024 1024)
      user-full-name "Filip Krikava"
      user-mail-address "krikava@gmail.com"
      visual-order-cursor-movement t)

(setq-default evil-shift-width 2
              history-length 1000
              prescient-history-length 1000
              tab-width 2)
#+END_SRC
* Terminal
#+INCLUDE: "terminal-config.org"
* Spelling

#+BEGIN_SRC sh :tangle no
mkdir ~/.local/share/aspell
curl -fsSL -o ~/.local/share/aspell/en-custom.txt 'http://app.aspell.net/create?max_size=80&spelling=US&max_variant=0&diacritic=both&special=hacker&special=roman-numerals&download=wordlist&encoding=utf-8&format=inline'
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "en"
      ispell-alternate-dictionary (expand-file-name "~/.local/share/aspell/en-custom.txt"))
;;      ispell-personal-dictionary (expand-file-name "personal-dictionary.txt" doom-private-dir))
#+END_SRC
* Windows splitting
Split window predictably, prompting for buffer to open.

#+BEGIN_SRC emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t
      +ivy-buffer-preview t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+END_SRC
* Packages
** Agda
#+BEGIN_SRC emacs-lisp
(after! agda2
  (set-lookup-handlers! 'agda2-mode
    :definition #'agda2-goto-definition-keyboard)

  (add-to-list 'auto-mode-alist '("\\.lagda.md\\'" . agda2-mode))

  (map! :after agda2-mode
        :map agda2-mode-map
        :i [left] #'evil-backward-char
        :localleader
        (:prefix "g"
          "G" nil
          "b" #'agda2-go-back
          "d" #'agda2-goto-definition-keyboard)))
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(after! tex
  (setq TeX-save-query nil
        TeX-PDF-mode t
        TeX-show-compilation nil)
  (map! :map TeX-mode-map
        :in "C-c C-c" #'TeX-command-run-all
        :in "C-c C-a" #'TeX-command-master
        :localleader
        "b" #'TeX-command-run-all
        "m" #'TeX-command-master))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
(after! avy
  (setq avy-all-windows t))
#+END_SRC
** Comint
#+BEGIN_SRC emacs-lisp
(after! comint
  (map! :map comint-mode-map
        :i [up] #'comint-previous-matching-input-from-input
        :i [down] #'comint-next-matching-input-from-input
        :i "C-k" #'kill-line
        :i "C-l" #'comint-clear-buffer)

  (setq comint-prompt-read-only t
        comint-scroll-to-bottom-on-output 'others
        comint-scroll-show-maximum-output t
        comint-move-point-for-matching-input 'end-of-line
        comint-scroll-to-bottom-on-input 'this))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-box-doc-enable nil
        company-minimum-prefix-length 3
        company-show-numbers t
        company-selection-wrap-around t)

  (add-hook 'evil-normal-state-entry-hook #'company-abort))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp :tangle no
(after! doom-modeline
  (setq doom-modeline-modal-icon nil)

  (doom-modeline-def-modeline 'main
    '(bar window-number modals matches buffer-info remote-host buffer-position selection-info)
    '(objed-state misc-info persp-name irc mu4e github debug input-method buffer-encoding lsp major-mode process vcs checker))

  (doom-modeline-def-modeline 'special
    '(bar window-number modals matches buffer-info-simple buffer-position selection-info)
    '(objed-state misc-info persp-name debug input-method irc-buffers buffer-encoding lsp major-mode process checker))

  (doom-modeline-def-modeline 'project
    '(bar window-number modals buffer-default-directory)
    '(misc-info mu4e github debug battery " " major-mode process)))
#+END_SRC
** Ediff
#+BEGIN_SRC emacs-lisp
(after! ediff
  ;; from https://emacs.stackexchange.com/a/21460/26020
  ;; Check for org mode and existence of buffer
  (defun f-ediff-org-showhide (buf command &rest cmdargs)
    "If buffer exists and is orgmode then execute command"
    (when buf
      (when (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
        (save-excursion (set-buffer buf) (apply command cmdargs)))))

  (defun f-ediff-org-unfold-tree-element ()
    "Unfold tree at diff location"
    (f-ediff-org-showhide ediff-buffer-A 'org-reveal)
    (f-ediff-org-showhide ediff-buffer-B 'org-reveal)
    (f-ediff-org-showhide ediff-buffer-C 'org-reveal))

  (defun f-ediff-org-fold-tree ()
    "Fold tree back to top level"
    (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)
    (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)
    (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1))

  (add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
  (add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree))
#+END_SRC
** ESS
#+BEGIN_SRC emacs-lisp
(after! ess
  (setq ess-default-style 'RStudio
        ess-indent-level 2
        ess-nuke-trailing-whitespace-p t
        ess-tab-complete-in-script t
        ess-indent-with-fancy-comments nil
        ess-R-argument-suffix "="
        ess-smart-S-assign-key nil
        ess-R-font-lock-keywords
        '((ess-R-fl-keyword:fun-defs . t)
          (ess-R-fl-keyword:modifiers . t)
          (ess-R-fl-keyword:keywords . t)
          (ess-R-fl-keyword:assign-ops . t)
          (ess-R-fl-keyword:constants . t)
          (ess-R-fl-keyword:F&T . t)
          (ess-fl-keyword:fun-calls . t)
          (ess-fl-keyword:numbers . t)
          (ess-fl-keyword:operators)
          (ess-fl-keyword:delimiters)
          (ess-fl-keyword:=)))

  (defun my-run-ess-R-debug ()
    (interactive)
    (let ((inferior-R-program-name "~/Research/Projects/R/R/R-3.6.2-dbg/bin/R"))
      (R)))

  ;; fix buffer in ready only mode, see https://github.com/emacs-ess/ESS/issues/300
  (add-hook 'inferior-ess-mode-hook
            (lambda ()
              (setq-local comint-use-prompt-regexp nil)
              (setq-local inhibit-field-text-motion nil)))

  (map! :localleader
        :map ess-mode-map
        "TAB"     #'ess-switch-to-inferior-or-script-buffer
        [backtab] #'ess-switch-process)

  (map! :map inferior-ess-mode-map
        :i [up] #'comint-previous-matching-input-from-input
        :i [down] #'comint-next-matching-input-from-input
        :localleader
        "TAB"     #'ess-switch-to-inferior-or-script-buffer))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp

(after! evil
  ;; this makes the Y/P work the same as in vim
  (evil-put-command-property 'evil-yank-line :motion 'evil-line))

#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (setq flycheck-lintr-linters "with_defaults(infix_spaces_linter=NULL, line_length_linter=NULL)"))
#+END_SRC
** Ivy

| Key     | Description                                   |
|---------+-----------------------------------------------|
| =C-o=     | Show possible actions                         |
| =C-M-o=   | Like =C-o= but do not quit                      |
| =M-j=     | Preview candidate                             |
| =C-M-n/p= | Combines next (=C-n=) / previous (=C-p=) with =M-j= |
| =M-n/p=   | Recalls history                               |
| =C-j=     | Selects the typed-in input                    |
| =C-w=     | Copies the content of kill-buffer             |
| =C-'=     | Use avy to select candidates                  |
| =right=   | Enters directory or move forward the cursor   |
| =left=    | Exists directory or move backward the cursor  |
| =M-o=     | Shows the transient state hydra               |

#+BEGIN_SRC emacs-lisp
(after! ivy
  (defun my--ivy-exit-directory-or-backward-char ()
    (interactive)
    (if (and ivy--directory (= (minibuffer-prompt-end) (point)) (= (length (ivy--input)) 0))
        (counsel-up-directory)
      (backward-char)))

  (defun my--ivy-enter-directory-or-forward-char ()
    (interactive)
    (letrec ((pos (point))
             (input-size (length (ivy--input)))
             (input-end (+ (minibuffer-prompt-end) input-size)))
      (cond ((and (< (point) input-end) (> input-size 0)) (forward-char))
            ((and ivy--directory (ivy--dirname-p (ivy-state-current ivy-last)))
             (counsel-down-directory))
            (t (ivy-partial-or-done)))))

  (map! :map ivy-minibuffer-map
        "C-j" #'ivy-immediate-done
        "C-w" #'ivy-yank-word
        "C-'" #'ivy-avy
        "<left>" #'my--ivy-exit-directory-or-backward-char
        "<right>" #'my--ivy-enter-directory-or-forward-char
        "TAB" #'my--ivy-enter-directory-or-insert)

  (setq ivy-action-wrap t
        ivy-count-format "(%d/%d) "
        ivy-read-action-function 'ivy-hydra-read-action
        ivy-use-virtual-buffers t)

  (minibuffer-depth-indicate-mode 1))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(after! magit
  (defconst my-dotfiles-git-dir (expand-file-name "~/.dotfiles"))

  (defun my--dotfiles-remove-magit-config (&optional kill)
    (setq magit-git-global-arguments
          (remove (format "--work-tree=%s" (getenv "HOME")) magit-git-global-arguments))
    (setq magit-git-global-arguments
          (remove (format "--git-dir=%s" my-dotfiles-git-dir) magit-git-global-arguments))
    (advice-remove 'magit-mode-bury-buffer #'my--dotfiles-remove-magit-config))

  ;; TODO make this work even if magit has not been loaded yet
  (defun my-dotfiles-magit ()
    (interactive)
    (when (and (boundp 'magit-git-global-arguments)
               (file-exists-p my-dotfiles-git-dir))
      (let ((home (getenv "HOME")))
        (add-to-list 'magit-git-global-arguments
                     (format "--work-tree=%s" home))
        (add-to-list 'magit-git-global-arguments
                     (format "--git-dir=%s" my-dotfiles-git-dir))
        (advice-add 'magit-mode-bury-buffer :after #'my--dotfiles-remove-magit-config)
        (magit-status-setup-buffer home)))))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(after! markdown-mode
  (set-company-backend! 'markdown-mode '(:separate company-ispell company-files company-yasnippet)))
(after! gfm-mode
  (set-company-backend! 'markdown-mode '(:separate company-ispell company-files company-yasnippet)))
#+END_SRC
** Evil nerd commenter
#+BEGIN_SRC emacs-lisp
(after! evil-nerd-commenter
  (map!
   :g "M-;" #'evilnc-comment-or-uncomment-lines))
#+END_SRC
** Ob-tmux
#+BEGIN_SRC emacs-lisp
(after! ob-tmux
  (setq org-babel-tmux-session-prefix "ob-"
        org-babel-tmux-terminal "st"
        org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e"))
  (add-to-list 'org-babel-load-languages '(tmux . t)))
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-files '("~/Notes/Journal")
        org-blank-before-new-entry '((heading . nil) (plain-list-item . nil))
        org-capture-templates
        '(("t" "Todo"
           entry (file+headline "~/Notes/Journal/TODO.org" "INBOX")  "* TODO %?\ncaptured on: %U\nfrom: %a\n%i")
          ("n" "Note"
           entry (file+headline "~/Notes/Journal/Notes.org" "Notes") "* %?\ncaptured on: %U\nfrom: %a\n%i"))
        org-catch-invisible-edits 'smart
        org-confirm-babel-evaluate nil
        org-cycle-separator-lines 1
        org-ellipsis " ․․․"
        org-hide-emphasis-markers t
        org-id-link-to-org-use-id 'create-if-interactive
        org-image-actual-width nil
        org-imenu-depth 8
        org-journal-date-format "%A, %B %d %Y"
        org-journal-time-format ""
        org-journal-file-format "Journal-%Y.org"
        org-journal-dir "~/Sync/Notes/Journal/"
        org-journal-file-type 'yearly
        org-latex-prefer-user-labels t
        org-log-done t
        org-log-done-with-time nil
        org-log-into-drawer t
        org-log-reschedule 'time
        org-refile-active-region-within-subtree t
        org-refile-allow-creating-parent-nodes 'confirm
        org-refile-targets '((nil :maxlevel . 6) (org-agenda-files :maxlevel . 7))
        org-refile-use-cache nil
        org-refile-use-outline-path 'file
        org-src-fontify-natively t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t
        org-startup-with-inline-images t
        org-startup-indented t
        org-special-ctrl-a/e t
        org-superstar-headline-bullets-list '("⁖")
        org-show-context-detail '((agenda . local)
                                  (bookmark-jump . lineage)
                                  (isearch . tree) ; I want to see more info when looking at tree
                                  (default . ancestors))
        org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "NEXT(n)" "|" "DONE(d!)" "CANCELED(c@)")))

  (defun my-org-show-current-heading-tidily ()
    (interactive)
    "Show next entry, keeping other entries closed."
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (outline-back-to-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  (defun my-org-babel-remove-result-buffer ()
    "Remove results from every code block in buffer."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward org-babel-src-block-regexp nil t)
        (org-babel-remove-result))))

  (defadvice org-archive-subtree (around my-org-archive-subtree activate)
    "Archives all items under the current heading"
    (let ((org-archive-location
           (if (save-excursion (org-back-to-heading)
                               (> (org-outline-level) 1))
               ((concat ) (car (split-string (or )g-archive-location "::"))
                "::* "
                (car (org-get-outline-path)))
             org-archive-location)))
      ad-do-it))

  (map! :map org-mode-map
        :localleader
        "d" nil
        (:prefix ("j" . "journal")
          "j" #'org-journal-new-entry
          "s" #'org-journal-search-forever)
        (:prefix ("d" . "dates")
          "e" #'org-evaluate-time-range
          "d" #'org-deadline
          "s" #'org-schedule
          "t" #'org-time-stamp
          "T" #'org-time-stamp-inactive)))
#+END_SRC
*** evil-org

Remap keys in insert mode. I just like the =C-k= too much.

#+BEGIN_SRC emacs-lisp
(after! evil-org
  (map! :map evil-org-mode-map
        :i "C-h" nil
        :i "C-j" nil
        :i "C-k" #'org-kill-line
        :i "C-l" nil))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(after! projectile
  (mapc (lambda (x)
          (when (file-directory-p x)
            (add-to-list 'projectile-project-search-path x)))
        '("~/Projects" "~/Research/Projects" "~/Research/Publications")))
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(after! rustic
    (setq lsp-rust-server 'rust-analyzer
          rustic-lsp-server 'rust-analyzer))
#+END_SRC
** Super save
#+BEGIN_SRC emacs-lisp
(use-package! super-save
  :unless noninteractive
  :custom
  (super-save-auto-save-when-idle t)
  (super-save-idle-duration 30)
  :config
  ;; add integration with ace-window
  (add-to-list 'super-save-triggers 'ace-window)
  (add-to-list 'super-save-triggers 'winum-select-window-by-number)
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-mode 1))

#+END_SRC
** Text
#+BEGIN_SRC emacs-lisp
(after! text-mode
  (set-company-backend! 'markdown-mode '(:separate company-ispell company-files company-yasnippet)))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(after! yasnippet
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets"))
#+END_SRC
** Web-mode
#+BEGIN_SRC emacs-lisp
(after! web-mode
  (add-hook 'web-mode-hook #'flycheck-mode)

  (setq web-mode-markup-indent-offset 2  ; Indentation
        web-mode-code-indent-offset 2
        web-mode-enable-auto-quoting nil ; disbale adding "" after an =
        web-mode-auto-close-style 2))
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp :tangle no
(after! which-key
  (setq which-key-idle-delay .6))
#+END_SRC
** Winum
#+BEGIN_SRC emacs-lisp
(after! winum
  (setq winum-scope 'frame-local))
  #+END_SRC
* Configuring bibliography management
Based on the draft of the [[https://github.com/hlissner/doom-emacs/blob/5bc10f8b75a8d08ad37eb3cff15347b46d0427e6/modules/tools/biblio/config.el][biblio doom module]]

#+BEGIN_SRC emacs-lisp
(setq my-bibliography-files '("~/Sync/Papers/references.bib"))
(setq my-bibliography-artifacts '("~/Sync/Papers/Artifacts"))
(setq my-bibliography-notes "~/Sync/Notes/Journal/Bibliography.org")
(setq my-bibliography-readling-list "~/Sync/Notes/Journal/Readings.org")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-find-file-external (fpath)
  (call-process shell-file-name nil
                nil nil
                shell-command-switch
                (format "%s %s"
                        (if (eq system-type 'darwin)
                            "open"
                          "xdg-open")
                        (shell-quote-argument fpath))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! ivy-bibtex

  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (if (string= (file-name-extension fpath) "pdf")
              (find-file fpath)
            (my-find-file-external fpath))))

  (defun my-bibtex-completion-open-pdf-external (keys &optional fallback-action)
    (let ((bibtex-completion-pdf-open-function 'my-find-file-external))
      (bibtex-completion-open-pdf keys fallback-action)))

  ;; from: https://github.com/org-roam/org-roam-bibtex
  (defun orb-process-file-field (citekey)
    "Process the 'file' BibTeX field and resolve if there are multiples.
     Search the disk for the document associated with this BibTeX
     entry.  The disk matching is based on looking in the
     `bibtex-completion-library-path' for a file with the
     CITEKEY.
     \(Mendeley, Zotero, normal paths) are all supported.  If there
     are multiple files found the user is prompted to select which one
     to enter"
    (let* ((entry (bibtex-completion-get-entry citekey))
           (paths (bibtex-completion-find-pdf entry)))
      (if (= (length paths) 1)
          (car paths)
        (completing-read "File to use: " paths))))

  (ivy-bibtex-ivify-action my-bibtex-completion-open-pdf-external my-ivy-bibtex-open-pdf-external)

  (ivy-add-actions
   'ivy-bibtex
   '(("E" my-ivy-bibtex-open-pdf-external "Open file in external viewer")
     ("c" ivy-bibtex-insert-citation "Insert citation")
     ("r" ivy-bibtex-insert-reference "Insert reference")))

  (setq bibtex-completion-bibliography my-bibliography-files
        bibtex-completion-library-path my-bibliography-artifacts
        bibtex-completion-notes-path my-bibliography-notes
        bibtex-completion-notes-template-one-file (concat
                                                   "\n"
                                                   "* ${author-or-editor} (${year}): ${title}\n"
                                                   "  :PROPERTIES:\n"
                                                   "  :Custom_ID: ${=key=}\n"
                                                   "  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
                                                   "  :URL: ${url}"
                                                   "  :DOI: ${doi}\n"
                                                   "  :END:\n\n"))
(add-to-list 'ivy-height-alist `(ivy-bibtex . ,(length (plist-get ivy--actions-list 'ivy-bibtex)))))
#+END_SRC

Other files than PDF have to specify the file in the =file= field of the bibtex
entry.

#+BEGIN_SRC emacs-lisp
(after! org-noter
  (setq org-noter-default-notes-file-names `(,my-bibliography-notes)))
#+END_SRC

** Org-ref
#+BEGIN_SRC emacs-lisp
(use-package! org-ref
  :when (featurep! :lang org)
  :after org
  :preface
  ;; This need to be set before the package is loaded, because org-ref will
  ;; automatically `require' an associated package during its loading.
  (setq org-ref-completion-library (cond ((featurep! :completion ivy)  #'org-ref-ivy-cite)
                                         ((featurep! :completion helm) #'org-ref-helm-bibtex)
                                         (t                            #'org-ref-reftex)))
  :custom
  (org-ref-bibliography-notes my-bibliography-notes)
  (org-ref-bibliography-files my-bibliography-files)
  (org-ref-default-bibliography my-bibliography-files)
  (org-ref-pdf-directory (car my-bibliography-artifacts))
  (reftex-default-bibliography org-ref-default-bibliography)
  ;; Although the name is helm-bibtex, it is actually a bibtex-completion function
  ;; it is the legacy naming of the project helm-bibtex that causes confusion.
  (org-ref-open-pdf-function 'org-ref-get-pdf-filename-helm-bibtex)
  (org-ref-notes-function #'org-ref-notes-function-one-file))
#+END_SRC
* Global keymap
** Handy shortcuts
#+BEGIN_SRC emacs-lisp
(map!
 :n "C-h" nil
 :i "C-x C-s"  #'my-save-buffer-and-switch-to-normal-mode
 :i "C-x s" #'company-yasnippet
 :i "C-k"   #'kill-visual-line
 :i "C-d"   #'evil-delete-char
 :g "M-u"   #'universal-argument
 :n "M-'"   #'spell-fu-goto-next-error
 :n "M-\""   #'spell-fu-goto-previous-error)
#+END_SRC
** Window movement
#+BEGIN_SRC emacs-lisp
(map!
 :g "M-1"   #'winum-select-window-1
 :g "M-2"   #'winum-select-window-2
 :g "M-3"   #'winum-select-window-3
 :g "M-4"   #'winum-select-window-4
 :g "M-5"   #'winum-select-window-5
 :g "M-6"   #'winum-select-window-6
 :g "M-7"   #'winum-select-window-7
 :g "M-8"   #'winum-select-window-8
 :g "M-9"   #'winum-select-window-9
 :g "M-0"   #'winum-select-window-0
 (:when (featurep! :ui workspaces)
   :g "C-1"   #'+workspace/switch-to-0
   :g "C-2"   #'+workspace/switch-to-1
   :g "C-3"   #'+workspace/switch-to-2
   :g "C-4"   #'+workspace/switch-to-3
   :g "C-5"   #'+workspace/switch-to-4
   :g "C-6"   #'+workspace/switch-to-5
   :g "C-7"   #'+workspace/switch-to-6
   :g "C-8"   #'+workspace/switch-to-7
   :g "C-9"   #'+workspace/switch-to-8
   :g "C-0"   #'+workspace/switch-to-final))
#+END_SRC
** Copy & paste
#+begin_src elisp
(map!
 ;; The paste shortcut (=C-S-V=) we only want in GUI. When running in terminal it
 ;; is better to use the terminal paste since it will be a [[https://cirw.in/blog/bracketed-paste][bracketed paste]].
 (:when (display-graphic-p) :g "C-S-V" #'my-paste-from-xclipboard)
 :g "C-S-X" #'my-cut-to-xclipboard
 :g "C-S-C" #'my-copy-to-xclipboard)
#+end_src
* Leader keymap
#+BEGIN_SRC emacs-lisp
(map! :leader
      "X" nil
      (:prefix ("n" . "notes")
        :desc "Org ref" "r" #'org-ref
        :desc "Bibliography" "b" #'helm-bibtex)
      (:prefix ("w" . "window")
        ;; the following are mapped to moving to window function
        ;; these are no needed as they are already mapped to C-w h / leader h
        ;; plus C-h is useful to see the rest of the mapping in which-key
        "C-h" nil
        "C-j" nil  ; ""
        "C-k" nil  ; ""
        "C-l" nil) ; ""
      (:prefix ("b" . "buffer")
        :desc "Switch to message buffer" "M"  #'my-switch-to-messages-buffer)
      (:prefix ("g". "git")
        :desc "My dotfiles status" "M" #'my-dotfiles-magit)
      (:prefix ("t" . "toggle")
        :desc "Auto-fill mode" "W" #'auto-fill-mode))
#+END_SRC
* Setup printing
#+BEGIN_SRC emacs-lisp
(setq pdf-misc-print-programm "/usr/bin/lpr"
      pdf-misc-print-programm-args '("-o media=A4" "-o sides=two-sided-long-edge"))
#+END_SRC
